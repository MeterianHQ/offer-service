buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

group = 'com.ovoenergy'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

jar {
    baseName = 'offer-service'
    version = '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    runtime('org.postgresql:postgresql:42.2.1')
    compile("org.projectlombok:lombok:1.16.6")
    compile("com.google.guava:guava:21.0")
    compile("javax.validation:validation-api:1.1.0.Final")
    compile("io.springfox:springfox-swagger2:2.0.3") {
        force = true
    }
    compile("io.springfox:springfox-swagger-ui:2.0.3") {
        force = true
    }
    compile("org.apache.commons:commons-lang3:3.4")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.powermock:powermock-api-mockito:1.6.2")
    testCompile("org.powermock:powermock-module-junit4:1.6.2")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.flextrade.jfixture:jfixture:2.4.0")
    testCompile("com.google.code.findbugs:jsr305:3.0.1")
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

idea {
    module {
        testSourceDirs += file('src/integration-test/java')
        scopes.TEST.plus += [ configurations.integrationTestCompile ]
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}